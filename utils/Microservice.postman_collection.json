{
	"info": {
		"_postman_id": "8d54fb3d-e7d1-4d9a-b9d1-185fcae05e02",
		"name": "Microservice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24575743"
	},
	"item": [
		{
			"name": "Orders",
			"item": [
				{
					"name": "Post New Order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerId\": 1,\r\n    \"productId\": 2,\r\n    \"quantity\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/orders/createOrder",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders",
								"createOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/orders/all",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order via ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/orders/2",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders Metrics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:3000/users/all",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\": \"Mark\",\r\n    \"productName\": \"Waffles\",\r\n    \"quantity\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/orders/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/orders/2",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragment{    \"username\": \"testuser\",    \"password\": \"12345\"}EndFragment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Post New Product",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Waffles\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/products/createProduct",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products",
								"createProduct"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Products",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzLCJyb2xlIjoiY3VzdG9tZXIiLCJpYXQiOjE3MjgxODQwNzcsImV4cCI6MTcyODE4NzY3N30.9JLZz0ciWq7GRCBKgeeXREg9D1R1OzMpLavC6BIUObU",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"hi\",\r\n    \"password\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/products/all",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product via ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/products/2",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Metrics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:3000/users/all",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"fuck\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/products/2",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/products/2",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3MjgxOTAxMjUsImV4cCI6MTcyODE5MzcyNX0.mSo4fEH2wVsLCpmkz6ATjJZ_cXFIghVi8xz6dYTRJaw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Gwy\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/users/createCustomer",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"createCustomer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:3000/users/all",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User via ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/users/2",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Metrics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:3000/users/all",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mark\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/users/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/users/2",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Login - Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the JSON parsing error by using pm.response.json() instead of pm.response.code\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - message, role, and token\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.message).to.exist;\r",
							"  pm.expect(responseData.role).to.exist;\r",
							"  pm.expect(responseData.token).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message, role, and token are of string type and not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"    pm.expect(responseData.role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should not be empty\");\r",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"// Check if the response is successful\r",
							"if (pm.response.code === 200) {\r",
							"    // Set the token to an environment variable\r",
							"    pm.environment.set(\"token\", pm.response.json().token);\r",
							"} else {\r",
							"    console.log(\"Login failed:\", pm.response.json());\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"testuser\",\r\n    \"password\": \"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the JSON parsing error by using pm.response.json() instead of pm.response.code\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - message, role, and token\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.message).to.exist;\r",
							"  pm.expect(responseData.role).to.exist;\r",
							"  pm.expect(responseData.token).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message, role, and token are of string type and not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"    pm.expect(responseData.role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should not be empty\");\r",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"// Check if the response is successful\r",
							"if (pm.response.code === 200) {\r",
							"    // Set the token to an environment variable\r",
							"    pm.environment.set(\"token\", pm.response.json().token);\r",
							"} else {\r",
							"    console.log(\"Login failed:\", pm.response.json());\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"testuser\",\r\n    \"password\": \"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the JSON parsing error by using pm.response.json() instead of pm.response.code\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - message, role, and token\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.message).to.exist;\r",
							"  pm.expect(responseData.role).to.exist;\r",
							"  pm.expect(responseData.token).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message, role, and token are of string type and not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"    pm.expect(responseData.role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should not be empty\");\r",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"// Check if the response is successful\r",
							"if (pm.response.code === 200) {\r",
							"    // Set the token to an environment variable\r",
							"    pm.environment.set(\"token\", pm.response.json().token);\r",
							"} else {\r",
							"    console.log(\"Login failed:\", pm.response.json());\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"testuser\",\r\n    \"password\": \"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}